(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require HighOrd.
Require int.Int.
Require real.Real.
Require real.RealInfix.
Require map.Map.

Parameter us_FORMULA_TO_BE_COMPLETED__: Prop.

Parameter us_TERM_TO_BE_COMPLETED__: forall {a:Type} {a_WT:WhyType a}, a.

Parameter us_VARIANT_TO_BE_COMPLETED__: Numbers.BinNums.Z.

(* Why3 assumption *)
Inductive pt :=
  | pt'mk : Reals.Rdefinitions.R -> Reals.Rdefinitions.R -> pt.
Axiom pt_WhyType : WhyType pt.
Existing Instance pt_WhyType.

(* Why3 assumption *)
Definition y (v:pt) : Reals.Rdefinitions.R :=
  match v with
  | pt'mk x x1 => x1
  end.

(* Why3 assumption *)
Definition x (v:pt) : Reals.Rdefinitions.R :=
  match v with
  | pt'mk x1 x2 => x1
  end.

Axiom array : forall (a:Type), Type.
Parameter array_WhyType :
  forall (a:Type) {a_WT:WhyType a}, WhyType (array a).
Existing Instance array_WhyType.

Parameter elts:
  forall {a:Type} {a_WT:WhyType a}, array a -> Numbers.BinNums.Z -> a.

Parameter length:
  forall {a:Type} {a_WT:WhyType a}, array a -> Numbers.BinNums.Z.

Axiom array'invariant :
  forall {a:Type} {a_WT:WhyType a},
  forall (self:array a), (0%Z <= (length self))%Z.

(* Why3 assumption *)
Definition mixfix_lbrb {a:Type} {a_WT:WhyType a} (a1:array a)
    (i:Numbers.BinNums.Z) : a :=
  elts a1 i.

Parameter mixfix_lblsmnrb:
  forall {a:Type} {a_WT:WhyType a}, array a -> Numbers.BinNums.Z -> a ->
  array a.

Axiom mixfix_lblsmnrb'spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:array a) (i:Numbers.BinNums.Z) (v:a),
  ((length (mixfix_lblsmnrb a1 i v)) = (length a1)) /\
  ((elts (mixfix_lblsmnrb a1 i v)) = (map.Map.set (elts a1) i v)).

Parameter make:
  forall {a:Type} {a_WT:WhyType a}, Numbers.BinNums.Z -> a -> array a.

Axiom make_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (n:Numbers.BinNums.Z) (v:a), (0%Z <= n)%Z ->
  (forall (i:Numbers.BinNums.Z), (0%Z <= i)%Z /\ (i < n)%Z ->
   ((mixfix_lbrb (make n v) i) = v)) /\
  ((length (make n v)) = n).

(* Why3 assumption *)
Definition pt_set := array pt.

(* Why3 assumption *)
Definition is_index (i:Numbers.BinNums.Z) (s:array pt) : Prop :=
  (0%Z <= i)%Z /\ (i < (length s))%Z.

(* Why3 assumption *)
Definition is_lower_pt (p1:pt) (p2:pt) : Prop :=
  ((y p1) < (y p2))%R \/ ((y p1) = (y p2)) /\ ((x p1) <= (x p2))%R.

(* Why3 assumption *)
Inductive ref (a:Type) :=
  | ref'mk : a -> ref a.
Axiom ref_WhyType : forall (a:Type) {a_WT:WhyType a}, WhyType (ref a).
Existing Instance ref_WhyType.
Arguments ref'mk {a}.

(* Why3 assumption *)
Definition contents {a:Type} {a_WT:WhyType a} (v:ref a) : a :=
  match v with
  | ref'mk x1 => x1
  end.

(* Why3 assumption *)
Definition crossproduct (p1:pt) (p2:pt) (p3:pt) : Reals.Rdefinitions.R :=
  ((((x p2) - (x p1))%R * ((y p3) - (y p1))%R)%R -
   (((x p3) - (x p1))%R * ((y p2) - (y p1))%R)%R)%R.

(* Why3 assumption *)
Definition colinear (p1:pt) (p2:pt) (p3:pt) : Prop :=
  ((crossproduct p1 p2 p3) = 0%R).

(* Why3 assumption *)
Definition ccw (p1:pt) (p2:pt) (p3:pt) : Prop :=
  (0%R < (crossproduct p1 p2 p3))%R.

Axiom knuth1 : forall (p1:pt) (p2:pt) (p3:pt), ccw p1 p2 p3 -> ccw p2 p3 p1.

Axiom knuth2 :
  forall (p1:pt) (p2:pt) (p3:pt), ccw p1 p2 p3 -> ~ ccw p2 p1 p3.

Axiom knuth3 :
  forall (p1:pt) (p2:pt) (p3:pt), ~ colinear p1 p2 p3 ->
  ccw p1 p2 p3 \/ ccw p1 p3 p2.

Axiom knuth4 :
  forall (p1:pt) (p2:pt) (p3:pt) (q:pt), ccw q p1 p2 -> ccw q p2 p3 ->
  ccw q p3 p1 -> ccw p1 p2 p3.

Axiom cramer :
  forall (p1:pt) (p2:pt) (p3:pt) (q1:pt) (q2:pt),
  ((((crossproduct q1 q2 p3) * (crossproduct q2 p1 p2))%R +
    ((crossproduct q1 q2 p1) * (crossproduct q2 p2 p3))%R)%R
   = ((crossproduct q1 q2 p2) * (crossproduct q2 p1 p3))%R).

Axiom knuth5_aux :
  forall (p1:pt) (p2:pt) (p3:pt) (q1:pt) (q2:pt),
  ccw q1 q2 p1 /\ ccw q2 p2 p3 /\ ccw q1 q2 p3 /\ ccw q2 p1 p2 ->
  (0%R < ((crossproduct q1 q2 p2) * (crossproduct q2 p1 p3))%R)%R /\
  ((0%R < (crossproduct q1 q2 p2))%R -> (0%R < (crossproduct q2 p1 p3))%R).

Axiom knuth5 :
  forall (p1:pt) (p2:pt) (p3:pt) (q1:pt) (q2:pt),
  ccw q1 q2 p1 /\ ccw q1 q2 p2 /\ ccw q1 q2 p3 ->
  ccw q2 p1 p2 /\ ccw q2 p2 p3 -> ccw q2 p1 p3.

Parameter diff2:
  Numbers.BinNums.Z -> Numbers.BinNums.Z -> Numbers.BinNums.Z ->
  Init.Datatypes.bool.

Axiom diff2'def :
  forall (k:Numbers.BinNums.Z) (i:Numbers.BinNums.Z) (j:Numbers.BinNums.Z),
  (~ (k = i) ->
   (~ (k = j) -> ((diff2 k i j) = Init.Datatypes.true)) /\
   ((k = j) -> ((diff2 k i j) = Init.Datatypes.false))) /\
  ((k = i) -> ((diff2 k i j) = Init.Datatypes.false)).

(* Why3 assumption *)
Definition all_on_left (s:array pt) (i:Numbers.BinNums.Z)
    (j:Numbers.BinNums.Z) : Prop :=
  forall (k:Numbers.BinNums.Z), is_index k s ->
  ((diff2 k i j) = Init.Datatypes.true) ->
  ccw (mixfix_lbrb s i) (mixfix_lbrb s j) (mixfix_lbrb s k).

(* Why3 assumption *)
Inductive path :=
  | path'mk : Numbers.BinNums.Z ->
      (Numbers.BinNums.Z -> Numbers.BinNums.Z) -> path.
Axiom path_WhyType : WhyType path.
Existing Instance path_WhyType.

(* Why3 assumption *)
Definition elements (v:path) : Numbers.BinNums.Z -> Numbers.BinNums.Z :=
  match v with
  | path'mk x1 x2 => x2
  end.

(* Why3 assumption *)
Definition size (v:path) : Numbers.BinNums.Z :=
  match v with
  | path'mk x1 x2 => x1
  end.

(* Why3 assumption *)
Definition is_valid_index (i:Numbers.BinNums.Z) (p:path) : Prop :=
  (0%Z <= i)%Z /\ (i < (size p))%Z.

Parameter distinct: path -> Init.Datatypes.bool.

Axiom distinct'spec :
  forall (p:path),
  ((distinct p) = Init.Datatypes.true) <->
  (forall (i:Numbers.BinNums.Z) (j:Numbers.BinNums.Z), is_valid_index i p ->
   is_valid_index j p -> (i < j)%Z -> ~ ((elements p i) = (elements p j))).

Parameter nth: path -> Numbers.BinNums.Z -> Numbers.BinNums.Z.

Axiom nth'spec :
  forall (p:path) (i:Numbers.BinNums.Z), is_valid_index i p ->
  ((nth p i) = (elements p i)).

Parameter wf_path: path -> array pt -> Init.Datatypes.bool.

Axiom wf_path'spec :
  forall (p:path) (s:array pt),
  ((wf_path p s) = Init.Datatypes.true) <->
  ((distinct p) = Init.Datatypes.true) /\
  (forall (i:Numbers.BinNums.Z), is_valid_index i p -> is_index (nth p i) s).

Parameter plus1mod:
  Numbers.BinNums.Z -> Numbers.BinNums.Z -> Numbers.BinNums.Z.

Axiom plus1mod'def :
  forall (i:Numbers.BinNums.Z) (len:Numbers.BinNums.Z),
  (((i + 1%Z)%Z = len) -> ((plus1mod i len) = 0%Z)) /\
  (~ ((i + 1%Z)%Z = len) -> ((plus1mod i len) = (i + 1%Z)%Z)).

(* Why3 assumption *)
Definition is_convex_hull (s:array pt) (p:path) : Prop :=
  ((wf_path p s) = Init.Datatypes.true) /\ (2%Z <= (length s))%Z ->
  forall (i:Numbers.BinNums.Z), is_valid_index i p ->
  all_on_left s (nth p i) (nth p (plus1mod i (size p))).

Parameter s: array pt.

Parameter p: path.

Axiom Requires : is_convex_hull s p.

(* Why3 goal *)
Theorem xx2'vc : ((wf_path p s) = Init.Datatypes.true).
Proof.


Qed.

