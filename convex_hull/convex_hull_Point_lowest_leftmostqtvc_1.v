(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require HighOrd.
Require int.Int.
Require real.Real.
Require real.RealInfix.
Require map.Map.

Parameter us_FORMULA_TO_BE_COMPLETED__: Prop.

Parameter us_TERM_TO_BE_COMPLETED__: forall {a:Type} {a_WT:WhyType a}, a.

Parameter us_VARIANT_TO_BE_COMPLETED__: Numbers.BinNums.Z.

(* Why3 assumption *)
Inductive pt :=
  | pt'mk : Reals.Rdefinitions.R -> Reals.Rdefinitions.R -> pt.
Axiom pt_WhyType : WhyType pt.
Existing Instance pt_WhyType.

(* Why3 assumption *)
Definition y (v:pt) : Reals.Rdefinitions.R :=
  match v with
  | pt'mk x x1 => x1
  end.

(* Why3 assumption *)
Definition x (v:pt) : Reals.Rdefinitions.R :=
  match v with
  | pt'mk x1 x2 => x1
  end.

Axiom array : forall (a:Type), Type.
Parameter array_WhyType :
  forall (a:Type) {a_WT:WhyType a}, WhyType (array a).
Existing Instance array_WhyType.

Parameter elts:
  forall {a:Type} {a_WT:WhyType a}, array a -> Numbers.BinNums.Z -> a.

Parameter length:
  forall {a:Type} {a_WT:WhyType a}, array a -> Numbers.BinNums.Z.

Axiom array'invariant :
  forall {a:Type} {a_WT:WhyType a},
  forall (self:array a), (0%Z <= (length self))%Z.

(* Why3 assumption *)
Definition mixfix_lbrb {a:Type} {a_WT:WhyType a} (a1:array a)
    (i:Numbers.BinNums.Z) : a :=
  elts a1 i.

Parameter mixfix_lblsmnrb:
  forall {a:Type} {a_WT:WhyType a}, array a -> Numbers.BinNums.Z -> a ->
  array a.

Axiom mixfix_lblsmnrb'spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:array a) (i:Numbers.BinNums.Z) (v:a),
  ((length (mixfix_lblsmnrb a1 i v)) = (length a1)) /\
  ((elts (mixfix_lblsmnrb a1 i v)) = (map.Map.set (elts a1) i v)).

Parameter make:
  forall {a:Type} {a_WT:WhyType a}, Numbers.BinNums.Z -> a -> array a.

Axiom make_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (n:Numbers.BinNums.Z) (v:a), (0%Z <= n)%Z ->
  (forall (i:Numbers.BinNums.Z), (0%Z <= i)%Z /\ (i < n)%Z ->
   ((mixfix_lbrb (make n v) i) = v)) /\
  ((length (make n v)) = n).

(* Why3 assumption *)
Definition pt_set := array pt.

(* Why3 assumption *)
Definition is_index (i:Numbers.BinNums.Z) (s:array pt) : Prop :=
  (0%Z <= i)%Z /\ (i < (length s))%Z.

Parameter is_lower_pt: pt -> pt -> Init.Datatypes.bool.

Axiom is_lower_pt'def :
  forall (p1:pt) (p2:pt),
  (((y p1) < (y p2))%R -> ((is_lower_pt p1 p2) = Init.Datatypes.true)) /\
  (~ ((y p1) < (y p2))%R ->
   (((y p1) = (y p2)) ->
    (((x p1) <= (x p2))%R -> ((is_lower_pt p1 p2) = Init.Datatypes.true)) /\
    (~ ((x p1) <= (x p2))%R -> ((is_lower_pt p1 p2) = Init.Datatypes.false))) /\
   (~ ((y p1) = (y p2)) -> ((is_lower_pt p1 p2) = Init.Datatypes.false))).

(* Why3 assumption *)
Inductive ref (a:Type) :=
  | ref'mk : a -> ref a.
Axiom ref_WhyType : forall (a:Type) {a_WT:WhyType a}, WhyType (ref a).
Existing Instance ref_WhyType.
Arguments ref'mk {a}.

(* Why3 assumption *)
Definition contents {a:Type} {a_WT:WhyType a} (v:ref a) : a :=
  match v with
  | ref'mk x1 => x1
  end.

Parameter s: array pt.

Axiom Requires : (0%Z < (length s))%Z.

(* Why3 goal *)
Theorem lowest_leftmost'vc : (0%Z <= 0%Z)%Z /\ (0%Z < (length s))%Z.
Proof.


Qed.

